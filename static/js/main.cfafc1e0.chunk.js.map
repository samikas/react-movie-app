{"version":3,"sources":["config.js","functions/movieMapper.js","components/GetMovies.js","functions/Movie.js","App.js","serviceWorker.js","index.js"],"names":["config","POPULAR_URL","TOP_RATED_URL","IMG_BASE_URL","NO_POSTER_URL","BASE_URL","movieMapper","movies","container","map","movie","tempContainer","title","poster_path","poster","year","release_date","slice","rating","vote_average","push","GetMovies","props","state","movieData","url","baseUrl","apiKey","this","type","axios","get","then","response","data","setState","results","className","index","key","src","alt","icon","faStar","React","Component","App","handleChange","event","value","target","addActiveClass","e","active","popularMovies","topRatedMovies","upcomingMovies","nowPlayingMovies","onClick","faBars","faTimes","to","exact","path","component","searching","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cfafc1e0.chunk.js","sourcesContent":["export const config = {\r\n    POPULAR_URL: 'https://api.themoviedb.org/3/movie/popular?api_key=a01df817e220cd955937381999b0924e',\r\n    TOP_RATED_URL: 'https://api.themoviedb.org/3/movie/top_rated?page=1&language=en-US&api_key=a01df817e220cd955937381999b0924e',\r\n    IMG_BASE_URL: 'https://image.tmdb.org/t/p/w342/',\r\n    NO_POSTER_URL: '\"img/noposter.jpg\"',\r\n    BASE_URL: 'https://api.themoviedb.org/3/search/movie?api_key=a01df817e220cd955937381999b0924e&language=en-US&page=1&include_adult=false&query='\r\n};","import { config } from '../config';\r\n\r\nexport default function movieMapper (movies) {\r\n    const container = [];\r\n    movies.map( movie => {\r\n      let tempContainer = {};\r\n      tempContainer.title = movie.title;\r\n      if(movie.poster_path === null){\r\n        tempContainer.poster = config.NO_POSTER_URL;  \r\n      } else {\r\n        tempContainer.poster = config.IMG_BASE_URL + movie.poster_path;\r\n      }\r\n      tempContainer.year = movie.release_date.slice(0,4);\r\n      tempContainer.rating = movie.vote_average;\r\n      return container.push(tempContainer);\r\n    })\r\n    return container;\r\n  }","import React from 'react';\r\nimport '../App.scss';\r\nimport axios from 'axios';\r\nimport  movieMapper from \"../functions/movieMapper\";\r\nimport  Movie from \"../functions/Movie\";\r\n\r\nclass GetMovies extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      movieData: []\r\n    };\r\n  }\r\n  \r\n  componentDidMount() {\r\n    let url;\r\n    let baseUrl = \"https://api.themoviedb.org/3/movie/\"\r\n    let apiKey = \"?api_key=a01df817e220cd955937381999b0924e\";\r\n      if(this.props.type === \"popular\") {\r\n          url = baseUrl + 'popular' + apiKey;\r\n      } else if (this.props.type === \"topRated\") {\r\n        url =  baseUrl + 'top_rated' + apiKey;\r\n      } else if (this.props.type === \"upcoming\") {\r\n        url = baseUrl + 'upcoming' + apiKey;\r\n      }  else if (this.props.type === \"nowPlaying\") {\r\n        url = baseUrl + 'now_playing' + apiKey;\r\n      }\r\n      axios.get(url).then(response => response.data)\r\n      .then((data) => {\r\n          this.setState({ movieData : movieMapper(data.results)});          \r\n      })\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n        <div>\r\n          {Movie(this.state.movieData)}\r\n        </div>\r\n      );\r\n    }\r\n}\r\nexport default GetMovies;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Movie(movieData) {\r\n    return (\r\n        <div className=\"movie-list\">\r\n        {movieData.map((movie, index) => \r\n            <div className=\"movie\" key={index}>\r\n                <img className=\"poster-img\" src={movie.poster} alt={movie.title}/>\r\n                <div className=\"poster-info \">\r\n                    <p>{movie.title}</p>\r\n                    <p><FontAwesomeIcon icon={faStar} /> {movie.rating}</p>\r\n                    <p>{movie.year}</p>\r\n                </div>\r\n            </div>)}\r\n        </div>);\r\n}","import React from 'react';\nimport './App.scss';\nimport GetMovies from './components/GetMovies';\nimport {BrowserRouter, Link, Route} from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      active: '',\n      movieData: [],\n    };\n  }\n\n  handleChange = event => {\n    this.setState({value: event.target.value});\n  }\n  \n  addActiveClass = (e) =>{\n    if(this.state.active) {\n        this.setState({active: ''});\n    } else {\n        this.setState({active: true});\n    }\n  } \n  popularMovies = () => {\n    return <GetMovies type=\"popular\" />\n  }\n  topRatedMovies = () => {\n    return <GetMovies type=\"topRated\" />\n  }\n  upcomingMovies = () => {\n    return <GetMovies type=\"upcoming\" />\n  }\n  nowPlayingMovies = () => {\n    return <GetMovies type=\"nowPlaying\"/>\n  }\n\n  render(){\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <div className=\"navi-wrapper\">\n            <h3 className=\"site-title\">Movie app</h3>\n            <FontAwesomeIcon onClick={this.addActiveClass} className=\"menu-icon\" icon={faBars}/>\n            <div className={`navi-links ${this.state.active ? 'menu-active': ''}`}>\n              <FontAwesomeIcon onClick={this.addActiveClass} className=\"close-menu-icon\" icon={faTimes}/>\n              <Link to=\"/\">Home</Link>\n              <Link to=\"/top-rated\">Top rated</Link>\n              <Link to=\"/upcoming\">Upcoming </Link>\n              <Link to=\"now-playing\">Now playing </Link>\n            </div>\n          </div>\n          <Route exact path=\"/\" component={this.popularMovies}/>\n          <Route path=\"/top-rated\" component={this.topRatedMovies}/>\n          <Route path=\"/upcoming\" component={this.upcomingMovies}/>\n          <Route path=\"/now-playing\" component={this.nowPlayingMovies}/>\n          <Route path=\"/search\" component={this.searching}/>\n        </div>\n      </BrowserRouter>\n      );\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}